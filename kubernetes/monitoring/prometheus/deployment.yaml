# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: prometheus
#   namespace: monitoring
#   labels:
#     app: prometheus
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: prometheus
#   template:
#     metadata:
#       labels:
#         app: prometheus
#     spec:
#       serviceAccountName: prometheus
#       containers:
#         - name: prometheus
#           image: prom/prometheus:v2.45.0
#           imagePullPolicy: IfNotPresent
#           ports:
#             - containerPort: 9090
#               name: http
#           args:
#             - "--config.file=/etc/prometheus/prometheus.yml"
#             - "--storage.tsdb.path=/prometheus"
#             - "--storage.tsdb.retention.time=15d"
#             - "--web.enable-lifecycle"
#             - "--web.console.libraries=/etc/prometheus/console_libraries"
#             - "--web.console.templates=/etc/prometheus/consoles"
#           volumeMounts:
#             - name: config-volume
#               mountPath: /etc/prometheus
#             - name: storage-volume
#               mountPath: /prometheus
#           readinessProbe:
#             httpGet:
#               path: /-/ready
#               port: 9090
#             initialDelaySeconds: 30
#             periodSeconds: 15
#           livenessProbe:
#             httpGet:
#               path: /-/healthy
#               port: 9090
#             initialDelaySeconds: 30
#             periodSeconds: 15
#           resources:
#             requests:
#               cpu: "250m"
#               memory: "512Mi"
#             limits:
#               cpu: "500m"
#               memory: "1Gi"
#       volumes:
#         - name: config-volume
#           configMap:
#             name: prometheus-config
#         - name: storage-volume
#           emptyDir: {}
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: prometheus
#   namespace: monitoring
#   annotations:
#     prometheus.io/scrape: "true"
#     prometheus.io/port: "9090"
#   labels:
#     app: prometheus
# spec:
#   ports:
#     - port: 9090
#       targetPort: 9090
#       name: http
#   selector:
#     app: prometheus
#   type: ClusterIP

# ---
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: prometheus-config
#   namespace: monitoring
# data:
#   prometheus.yml: |
#     global:
#       scrape_interval: 15s
#       evaluation_interval: 15s
#       external_labels:
#         monitor: 'memory-game-monitor'

#     # Alertmanager configuration (can be added later)
#     # alerting:
#     #   alertmanagers:
#     #   - static_configs:
#     #     - targets:
#     #       - alertmanager:9093

#     # Rules and alerts (can be added later)
#     # rule_files:
#     #   - "/etc/prometheus/rules/*.rules"

#     scrape_configs:
#       # Scrape Prometheus itself
#       - job_name: 'prometheus'
#         static_configs:
#         - targets: ['localhost:9090']

#       # Scrape node-exporter for host metrics
#       - job_name: 'node-exporter'
#         kubernetes_sd_configs:
#         - role: endpoints
#           namespaces:
#             names:
#             - monitoring
#         relabel_configs:
#         - source_labels: [__meta_kubernetes_service_name]
#           action: keep
#           regex: node-exporter
#         - source_labels: [__meta_kubernetes_endpoint_port_name]
#           action: keep
#           regex: metrics

#       # Scrape kube-state-metrics
#       - job_name: 'kube-state-metrics'
#         kubernetes_sd_configs:
#         - role: endpoints
#           namespaces:
#             names:
#             - monitoring
#         relabel_configs:
#         - source_labels: [__meta_kubernetes_service_name]
#           action: keep
#           regex: kube-state-metrics
#         - source_labels: [__meta_kubernetes_endpoint_port_name]
#           action: keep
#           regex: http-metrics

#       # Scrape cAdvisor for container metrics
#       - job_name: 'cadvisor'
#         scheme: https
#         tls_config:
#           ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
#           insecure_skip_verify: true
#         bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
#         kubernetes_sd_configs:
#         - role: node
#         relabel_configs:
#         - action: labelmap
#           regex: __meta_kubernetes_node_label_(.+)
#         - target_label: __address__
#           replacement: kubernetes.default.svc:443
#         - source_labels: [__meta_kubernetes_node_name]
#           regex: (.+)
#           target_label: __metrics_path__
#           replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor

#       # Scrape apiserver
#       - job_name: 'kubernetes-apiservers'
#         kubernetes_sd_configs:
#         - role: endpoints
#           namespaces:
#             names:
#             - default
#         scheme: https
#         tls_config:
#           ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
#           insecure_skip_verify: true
#         bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
#         relabel_configs:
#         - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
#           action: keep
#           regex: default;kubernetes;https

#       # Scrape kubelet
#       - job_name: 'kubernetes-nodes'
#         scheme: https
#         tls_config:
#           ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
#           insecure_skip_verify: true
#         bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
#         kubernetes_sd_configs:
#         - role: node
#         relabel_configs:
#         - action: labelmap
#           regex: __meta_kubernetes_node_label_(.+)
#         - target_label: __address__
#           replacement: kubernetes.default.svc:443
#         - source_labels: [__meta_kubernetes_node_name]
#           regex: (.+)
#           target_label: __metrics_path__
#           replacement: /api/v1/nodes/${1}/proxy/metrics

#       # Scrape pods with annotations
#       - job_name: 'kubernetes-pods'
#         kubernetes_sd_configs:
#         - role: pod
#         relabel_configs:
#         - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
#           action: keep
#           regex: true
#         - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
#           action: replace
#           target_label: __metrics_path__
#           regex: (.+)
#         - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
#           action: replace
#           regex: (.+):(?:\d+);(\d+)
#           replacement: ${1}:${2}
#           target_label: __address__
#         - action: labelmap
#           regex: __meta_kubernetes_pod_label_(.+)
#         - source_labels: [__meta_kubernetes_namespace]
#           action: replace
#           target_label: kubernetes_namespace
#         - source_labels: [__meta_kubernetes_pod_name]
#           action: replace
#           target_label: kubernetes_pod_name

#       # Scrape services with annotations
#       - job_name: 'kubernetes-services'
#         kubernetes_sd_configs:
#         - role: service
#         relabel_configs:
#         - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
#           action: keep
#           regex: true
#         - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
#           action: replace
#           target_label: __metrics_path__
#           regex: (.+)
#         - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
#           action: replace
#           target_label: __address__
#           regex: (.+)(?::\d+);(\d+)
#           replacement: $1:$2
#         - action: labelmap
#           regex: __meta_kubernetes_service_label_(.+)
#         - source_labels: [__meta_kubernetes_namespace]
#           action: replace
#           target_label: kubernetes_namespace
#         - source_labels: [__meta_kubernetes_service_name]
#           action: replace
#           target_label: kubernetes_name

#       # Scrape memory-game backend service
#       - job_name: 'memory-game-backend'
#         kubernetes_sd_configs:
#         - role: endpoints
#           namespaces:
#             names:
#             - memory-game
#         relabel_configs:
#         - source_labels: [__meta_kubernetes_service_name]
#           action: keep
#           regex: backend
#         - source_labels: [__meta_kubernetes_pod_container_port_number]
#           action: keep
#           regex: 3001

# ---
# apiVersion: v1
# kind: ServiceAccount
# metadata:
#   name: prometheus
#   namespace: monitoring
# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRole
# metadata:
#   name: prometheus
# rules:
# - apiGroups: [""]
#   resources:
#   - nodes
#   - nodes/proxy
#   - services
#   - endpoints
#   - pods
#   verbs: ["get", "list", "watch"]
# - apiGroups:
#   - extensions
#   - networking.k8s.io
#   resources:
#   - ingresses
#   verbs: ["get", "list", "watch"]
# - nonResourceURLs: ["/metrics"]
#   verbs: ["get"]
# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRoleBinding
# metadata:
#   name: prometheus
# roleRef:
#   apiGroup: rbac.authorization.k8s.io
#   kind: ClusterRole
#   name: prometheus
# subjects:
# - kind: ServiceAccount
#   name: prometheus
#   namespace: monitoring