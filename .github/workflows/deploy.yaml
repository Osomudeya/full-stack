name: Build and Deploy Backend + Frontend App to AKS

on:
#   push:
#     branches:
#       - main
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual trigger'
        required: true
        type: string

env:
  ACR_LOGIN_SERVER: appacr94.azurecr.io
  ACR_NAME: appacr94
  BACKEND_IMAGE_NAME: appacr94.azurecr.io/memory-game-backend:latest
  FRONTEND_IMAGE_NAME: appacr94.azurecr.io/memory-game-frontend:latest
  IMAGE_TAG: $GITHUB_SHA
  BACKEND_DEPLOYMENT_NAME: backend
  FRONTEND_DEPLOYMENT_NAME: frontend
  NAMESPACE: memory-game
  KUBECONFIG: ~/.kube/config

  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  JUMPBOX_PASSWORD: ${{ secrets.JUMPBOX_PASSWORD }}
  GRAFANA_PASSWORD: ${{ secrets.GRAFANA_PASSWORD }}


jobs:
  build-push-deploy:
    name: Build, Push to ACR, Deploy to AKS
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Login to Azure
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Azure CLI - Login to ACR
      run: |
        az acr login --name appacr94

    - name: Build and Push Backend Image
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ACR_NAME/$BACKEND_IMAGE_NAME:$IMAGE_TAG ./application/backend
        docker push $ACR_NAME/$BACKEND_IMAGE_NAME:$IMAGE_TAG

    - name: Build and Push Frontend Image
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ACR_NAME/$FRONTEND_IMAGE_NAME:$IMAGE_TAG ./application/frontend
        docker push $ACR_NAME/$FRONTEND_IMAGE_NAME:$IMAGE_TAG

    - name: Install sshpass
      run: sudo apt-get update && sudo apt-get install -y sshpass

    - name: Copy Kubernetes Manifests to Bastion
      env:
        BASTION_HOST: ${{ secrets.JUMPBOX_IP }}
        BASTION_USER: azureuser
        BASTION_PASSWORD: ${{ secrets.JUMPBOX_PASSWORD }}
      run: |
        sshpass -p "$BASTION_PASSWORD" scp -o StrictHostKeyChecking=no -r ./kubernetes/application $BASTION_USER@$BASTION_HOST:/tmp/application

    - name: Deploy Backend and Frontend from Bastion
      env:
        BASTION_HOST: ${{ secrets.JUMPBOX_IP }}
        BASTION_USER: azureuser
        BASTION_PASSWORD: ${{ secrets.JUMPBOX_PASSWORD }}
        ACR_NAME: appacr94.azurecr.io
        IMAGE_TAG: ${{ github.sha }}
      run: |
        sshpass -p "$BASTION_PASSWORD" ssh -o StrictHostKeyChecking=no "$BASTION_USER@$BASTION_HOST" bash << EOF
          set -e
          echo "⚡ Applying secrets, namespace, and deployments..."
          kubectl apply -f /tmp/application/namespace.yaml
          kubectl apply -f /tmp/application/secrets.yaml

          echo "⚡ Updating backend deployment image..."
          kubectl set image deployment/backend backend=$ACR_NAME/$BACKEND_IMAGE_NAME:$IMAGE_TAG -n $NAMESPACE

          echo "⚡ Updating frontend deployment image..."
          kubectl set image deployment/frontend frontend=$ACR_NAME/$FRONTEND_IMAGE_NAME:$IMAGE_TAG -n $NAMESPACE

          echo "⚡ Applying Ingress..."
          kubectl apply -f /tmp/application/ingress.yaml

          echo "✅ All resources applied successfully!"
        EOF
