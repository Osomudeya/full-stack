# Global configuration
global:
  environment: production

# Memory Game Application
memoryGame:
  frontend:
    replicaCount: 2
    image:
      repository: yourACRname.azurecr.io/memory-game-frontend
      tag: latest
      pullPolicy: IfNotPresent
    resources:
      requests:
        cpu: "100m"
        memory: "128Mi"
      limits:
        cpu: "200m"
        memory: "256Mi"
    service:
      type: ClusterIP
      port: 80
    
  backend:
    replicaCount: 2
    image:
      repository: yourACRname.azurecr.io/memory-game-backend
      tag: latest
      pullPolicy: IfNotPresent
    resources:
      requests:
        cpu: "100m"
        memory: "128Mi"
      limits:
        cpu: "300m"
        memory: "256Mi"
    service:
      type: ClusterIP
      port: 80
    env:
      PORT: "3001"
      DB_HOST: "postgres"
      DB_PORT: "5432"
  
  database:
    image:
      repository: postgres
      tag: "14-alpine"
      pullPolicy: IfNotPresent
    resources:
      requests:
        cpu: "100m"
        memory: "256Mi"
      limits:
        cpu: "500m"
        memory: "512Mi"
    storage:
      size: 1Gi
      storageClass: ""
    credentials:
      user: postgres
      password: Password123  # In production, use secrets manager
      database: gamedb

# Ingress Configuration
ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/use-regex: "true"
  hosts:
    - host: memory-game.example.com
      paths:
        - path: /api/(.*)
          service: backend
          port: 80
        - path: /(.*)
          service: frontend
          port: 80

# Monitoring Stack
monitoring:
  enabled: true
  
  prometheus:
    enabled: true
    image:
      repository: prom/prometheus
      tag: v2.45.0
      pullPolicy: IfNotPresent
    resources:
      requests:
        cpu: "250m"
        memory: "512Mi"
      limits:
        cpu: "500m"
        memory: "1Gi"
    retention:
      time: 15d
  
  grafana:
    enabled: true
    image:
      repository: grafana/grafana
      tag: 10.0.3
      pullPolicy: IfNotPresent
    resources:
      requests:
        cpu: "100m"
        memory: "256Mi"
      limits:
        cpu: "200m"
        memory: "512Mi"
    admin:
      user: admin
      password: admin  # In production, use secrets manager
    plugins: "grafana-piechart-panel,grafana-clock-panel"
  
  loki:
    enabled: true
    image:
      repository: grafana/loki
      tag: 2.8.2
      pullPolicy: IfNotPresent
    resources:
      requests:
        cpu: "100m"
        memory: "256Mi"
      limits:
        cpu: "200m"
        memory: "512Mi"
  
  promtail:
    enabled: true
    image:
      repository: grafana/promtail
      tag: 2.8.2
      pullPolicy: IfNotPresent
    resources:
      requests:
        cpu: "50m"
        memory: "128Mi"
      limits:
        cpu: "100m"
        memory: "256Mi"
  
  kubeStateMetrics:
    enabled: true
    image:
      repository: k8s.gcr.io/kube-state-metrics/kube-state-metrics
      tag: v2.8.2
      pullPolicy: IfNotPresent
    resources:
      requests:
        cpu: "100m"
        memory: "190Mi"
      limits:
        cpu: "200m"
        memory: "256Mi"
  
  nodeExporter:
    enabled: true
    image:
      repository: prom/node-exporter
      tag: v1.5.0
      pullPolicy: IfNotPresent
    resources:
      requests:
        cpu: "100m"
        memory: "30Mi"
      limits:
        cpu: "200m"
        memory: "50Mi"
  
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/rewrite-target: /$1
      nginx.ingress.kubernetes.io/use-regex: "true"
    hosts:
      - host: monitoring.example.com
        paths:
          - path: /grafana/(.*)
            service: grafana
            port: 3000
          - path: /prometheus/(.*)
            service: prometheus
            port: 9090
          - path: /loki/(.*)
            service: loki
            port: 3100